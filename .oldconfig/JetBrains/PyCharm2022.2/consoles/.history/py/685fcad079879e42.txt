tshirts = [(color, size) for color in colors for size in sizes]
-. . -..- - / . -. - .-. -.--
for color in colors:
    for size in sizes:
        print((color, size))
        
-. . -..- - / . -. - .-. -.--
tshirts = [(color, size) for size in sizes for color in colors]
-. . -..- - / . -. - .-. -.--
tshirts
-. . -..- - / . -. - .-. -.--
symbols
-. . -..- - / . -. - .-. -.--
symbols = '$¢£¥€¤'
-. . -..- - / . -. - .-. -.--
tuple(ord(symbol) for symbol in symbols)
-. . -..- - / . -. - .-. -.--
import array
-. . -..- - / . -. - .-. -.--
array.array('I', (ord(symbol) for symbol in symbols))
-. . -..- - / . -. - .-. -.--
colors = ['black', 'white']
-. . -..- - / . -. - .-. -.--
sizes = ['S', 'M', 'L']
-. . -..- - / . -. - .-. -.--
for tshirt in (f'{c} {s}' for c in colors for s in sizes):
    print(tshirt)
    
-. . -..- - / . -. - .-. -.--
city, year, pop, chg, area = ('Tokyo', 2003, 32_450, 0.66, 8014)
-. . -..- - / . -. - .-. -.--
traveler_ids = [('USA', '31195855'), ('BRA', 'CE342567'), ('ESP', 'XDA205856')]
-. . -..- - / . -. - .-. -.--
for passport in sorted(traveler_ids):
    print('%s/%s' % passport0)
    
-. . -..- - / . -. - .-. -.--
for passport in sorted(traveler_ids):
    print('%s/%s' % passport)
    
    
    
-. . -..- - / . -. - .-. -.--
for country, _ in traveler_ids:
    print(country)
    
-. . -..- - / . -. - .-. -.--
a = (10, 'alpha', [1, 2])
-. . -..- - / . -. - .-. -.--
b = (10, 'alpha', [1, 2])
-. . -..- - / . -. - .-. -.--
b[-1].append(99)
-. . -..- - / . -. - .-. -.--
a == b
-. . -..- - / . -. - .-. -.--
b
-. . -..- - / . -. - .-. -.--
def fixed(o):
    try:
        hash(o)
    except TypeError:
        return False
    return True

-. . -..- - / . -. - .-. -.--
tf = (10, 'alpha', (1, 2))
-. . -..- - / . -. - .-. -.--
tm = (10, 'alpha', [1, 2])
-. . -..- - / . -. - .-. -.--
fixed(tf)
-. . -..- - / . -. - .-. -.--
fixed(tm)
-. . -..- - / . -. - .-. -.--
a[-1]
-. . -..- - / . -. - .-. -.--
a[0]
-. . -..- - / . -. - .-. -.--
a[1]
-. . -..- - / . -. - .-. -.--
a.__iter__()
-. . -..- - / . -. - .-. -.--
len(a)
-. . -..- - / . -. - .-. -.--
lax_coordinates = (33.9425, -118.408056)
-. . -..- - / . -. - .-. -.--
latitude, longitude = lax_coordinates
-. . -..- - / . -. - .-. -.--
latitude
-. . -..- - / . -. - .-. -.--
longitude
-. . -..- - / . -. - .-. -.--
divmod(20, 8)
-. . -..- - / . -. - .-. -.--
t = (20, 8)
-. . -..- - / . -. - .-. -.--
divmod(*t)
-. . -..- - / . -. - .-. -.--
divmod(t)
-. . -..- - / . -. - .-. -.--
quotient, remainder = divmod(*t)
-. . -..- - / . -. - .-. -.--
quotient
-. . -..- - / . -. - .-. -.--
remainder
-. . -..- - / . -. - .-. -.--
quotient, remainder
-. . -..- - / . -. - .-. -.--
import os
-. . -..- - / . -. - .-. -.--
_, filename = os.path.split('/home/farhan/Repositories/Dummies/fibo.py/fibo.py')
-. . -..- - / . -. - .-. -.--
filename
-. . -..- - / . -. - .-. -.--
a, b, *rest = range(5)
-. . -..- - / . -. - .-. -.--
a, b, *rest = range(3)
-. . -..- - / . -. - .-. -.--
a, b, *rest = range(2)
-. . -..- - / . -. - .-. -.--
a, b, *rest = range(22)
-. . -..- - / . -. - .-. -.--
a, b, rest
-. . -..- - / . -. - .-. -.--
a, *body, c, d = range(5)
-. . -..- - / . -. - .-. -.--
a, body, c d
-. . -..- - / . -. - .-. -.--
a, body, c, d
-. . -..- - / . -. - .-. -.--
*head, b, c, d = range(5)
-. . -..- - / . -. - .-. -.--
head, b, c, d
-. . -..- - / . -. - .-. -.--
def fun(a, b, c, d, *rest):
    return a, b, c, d, rest

-. . -..- - / . -. - .-. -.--
fun(*[1, 2], 3, range(*4, 7))
-. . -..- - / . -. - .-. -.--
fun(*[1, 2], 3, range(4, 7))
-. . -..- - / . -. - .-. -.--
fun(*[1, 2], 3, ***range(4, 7))
-. . -..- - / . -. - .-. -.--
fun(*[1, 2], 3, *range(4, 7))
-. . -..- - / . -. - .-. -.--
*range(4), 4
-. . -..- - / . -. - .-. -.--
[*range(4), 4]
-. . -..- - / . -. - .-. -.--
{*range(4), 4, *(5, 6, 7)}
-. . -..- - / . -. - .-. -.--
def handle_command(self, message):
    match message:
        case ['BEEPER', frequency, times]:
            self.beep(times, frequency)
        case ['NECK', angle]:
            self.rotate_neck(angle)
        case ['LED', ident, intensity]:
            self.leds[indent].set_brightness(ident, intensity)
        case ['LED', ident, red, green, blue]:
            self.leds[ident].set_color(ident, red, green, blue)
        case _:
            raise InvalidCommand(message)
        
-. . -..- - / . -. - .-. -.--
metro_areas = [
    ('Tokyo', 'JP', 36.933, (35.689722, 139.691667)),
    ('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889)),
    ('Mexico City', 'MX', 20.142, (19.433333, -99.133333)),
    ('New York-Newark', 'US', 20.104, (40.808611, -74.020386)),
    ('Sao Paulo', 'BR', 19.649, (-23.547778, -46.635833)),
]

def main():
    print(f'{"":15} | {"latitude":>9} | {"longitude":>9}')
    for name, _, _, (lat, lon) in metro_areas:
        if lon <= 0:
            print(f'{name:15} | {lat:9.4f} | {lon:9.4f}')
            
if __name__ == '__main__':
    main()
    
-. . -..- - / . -. - .-. -.--
parse('(gcd 18 45)')
-. . -..- - / . -. - .-. -.--
l = [10, 20, 30, 40, 50, 60]
-. . -..- - / . -. - .-. -.--
l[:2]
-. . -..- - / . -. - .-. -.--
l[2:]
-. . -..- - / . -. - .-. -.--
l[:3]
-. . -..- - / . -. - .-. -.--
l[3:]
-. . -..- - / . -. - .-. -.--
s = 'bicycle'
-. . -..- - / . -. - .-. -.--
s[::3]
-. . -..- - / . -. - .-. -.--
s[::-1]
-. . -..- - / . -. - .-. -.--
s[::-2]
-. . -..- - / . -. - .-. -.--
invoice = """"""
-. . -..- - / . -. - .-. -.--
l[2:5] = [20, 30, 40]
-. . -..- - / . -. - .-. -.--
l = list(range(10))
-. . -..- - / . -. - .-. -.--
l[2:5] = [20, 30]
-. . -..- - / . -. - .-. -.--
del l[5:7]
-. . -..- - / . -. - .-. -.--
l[3::2] = [11, 22]
-. . -..- - / . -. - .-. -.--
l[2:5] = 100
-. . -..- - / . -. - .-. -.--
l[2:5] =[100]
-. . -..- - / . -. - .-. -.--
l * 5
-. . -..- - / . -. - .-. -.--
5 * 'abcd'
-. . -..- - / . -. - .-. -.--
my_list = [[]] * 3
-. . -..- - / . -. - .-. -.--
print(my_list)
-. . -..- - / . -. - .-. -.--
board = [['_'] * 3 for i in range(3)]
-. . -..- - / . -. - .-. -.--
board[1][2] = 'X'
-. . -..- - / . -. - .-. -.--
board = []
-. . -..- - / . -. - .-. -.--
for i in range(3):
    row = ['_'] * 3
    board.append(row)
    
-. . -..- - / . -. - .-. -.--
board[2][0] = 'X'
-. . -..- - / . -. - .-. -.--
board
-. . -..- - / . -. - .-. -.--
l = [1, 2, 3]
-. . -..- - / . -. - .-. -.--
l *= 2
-. . -..- - / . -. - .-. -.--
l
-. . -..- - / . -. - .-. -.--
id(l)
-. . -..- - / . -. - .-. -.--
t = (1, 2, 3)
-. . -..- - / . -. - .-. -.--
t *= 2
-. . -..- - / . -. - .-. -.--
id(t)
-. . -..- - / . -. - .-. -.--
t = (1, 2, [30, 40])
-. . -..- - / . -. - .-. -.--
t[2] += [50, 60]
-. . -..- - / . -. - .-. -.--
t
-. . -..- - / . -. - .-. -.--
dis.dis('s[a] += b')
-. . -..- - / . -. - .-. -.--
fruits = ['grape', 'raspberry', 'apple', 'banana']
-. . -..- - / . -. - .-. -.--
sorted(fruits)
-. . -..- - / . -. - .-. -.--
sorted(fruits, reverse=True)
-. . -..- - / . -. - .-. -.--
sorted(fruits, key=len)
-. . -..- - / . -. - .-. -.--
sorted(fruits, key=len, reverse=true)
-. . -..- - / . -. - .-. -.--
sorted(fruits, key=len, reverse=True)
-. . -..- - / . -. - .-. -.--
fruits.sort()
-. . -..- - / . -. - .-. -.--
fruits
-. . -..- - / . -. - .-. -.--
from random import random
-. . -..- - / . -. - .-. -.--
floats = array('d', (random() for i in range(10**7)))
-. . -..- - / . -. - .-. -.--
floats[-1]
-. . -..- - / . -. - .-. -.--
fp = open('floats.bin', 'wb')
-. . -..- - / . -. - .-. -.--
floats.tofile(fp)
-. . -..- - / . -. - .-. -.--
floats2 = array('d')
-. . -..- - / . -. - .-. -.--
fp = open('floats.bin', 'rb')
-. . -..- - / . -. - .-. -.--
floats2.fromfile(fp, 10**7)
-. . -..- - / . -. - .-. -.--
fp.close()
-. . -..- - / . -. - .-. -.--
floats2[-1]
-. . -..- - / . -. - .-. -.--
floats2 == floats
-. . -..- - / . -. - .-. -.--
id(floats2)
-. . -..- - / . -. - .-. -.--
id(floats)
-. . -..- - / . -. - .-. -.--
octets = array('B', range(6))
-. . -..- - / . -. - .-. -.--
m1 = memoryview(octets)
-. . -..- - / . -. - .-. -.--
m1.tolist()
-. . -..- - / . -. - .-. -.--
m2 = m1.cast('B', [2, 3])
-. . -..- - / . -. - .-. -.--
m2.tolist()
-. . -..- - / . -. - .-. -.--
m3 = m1.cast('B', [3, 2])
-. . -..- - / . -. - .-. -.--
m3.tolist()
-. . -..- - / . -. - .-. -.--
m2[1,1] = 22
-. . -..- - / . -. - .-. -.--
m3[1,1] = 33
-. . -..- - / . -. - .-. -.--
octets
-. . -..- - / . -. - .-. -.--
from array import array
-. . -..- - / . -. - .-. -.--
numbers = array.array('h', [-2, -1, 0, 1, 2])
-. . -..- - / . -. - .-. -.--
numbers = array('h', [-2, -1, 0, 1, 2])
-. . -..- - / . -. - .-. -.--
memv = memoryview(numbers)
-. . -..- - / . -. - .-. -.--
len(memv)
-. . -..- - / . -. - .-. -.--
memv[0]
-. . -..- - / . -. - .-. -.--
memv_oct = memv.cast('B')
-. . -..- - / . -. - .-. -.--
memv_oct.tolist()
-. . -..- - / . -. - .-. -.--
memv_oct[5] = 4
-. . -..- - / . -. - .-. -.--
numbers
-. . -..- - / . -. - .-. -.--
clear
-. . -..- - / . -. - .-. -.--
import numpy as np
-. . -..- - / . -. - .-. -.--
a = np.arange(12)
-. . -..- - / . -. - .-. -.--
type(a)
-. . -..- - / . -. - .-. -.--
a.shape
-. . -..- - / . -. - .-. -.--
a.shape = 3, 4
-. . -..- - / . -. - .-. -.--
a
-. . -..- - / . -. - .-. -.--
a[2]
-. . -..- - / . -. - .-. -.--
a[2,1]
-. . -..- - / . -. - .-. -.--
a[:, 1]
-. . -..- - / . -. - .-. -.--
a.transpose()
-. . -..- - / . -. - .-. -.--
import numpy
-. . -..- - / . -. - .-. -.--
floats = numpy.loadtxt('floats-10M-lines.txt')
-. . -..- - / . -. - .-. -.--
from collections import deque
-. . -..- - / . -. - .-. -.--
dq = deque(range(10), maxlen=10)
-. . -..- - / . -. - .-. -.--
dq.rotate(3)
-. . -..- - / . -. - .-. -.--
dq.rotate(-4)
-. . -..- - / . -. - .-. -.--
dq.appendleft(-1)
-. . -..- - / . -. - .-. -.--
dq.extend([11, 22, 33])
-. . -..- - / . -. - .-. -.--
dq.extendleft([10, 20, 30, 40])
-. . -..- - / . -. - .-. -.--
dq
-. . -..- - / . -. - .-. -.--
dial_codes = [
    (800, 'Bangladesh'),
    (55, 'Brazil'),
    (86, 'China'),
    (91, 'India'),
    (62, 'Indonesia'),
    (81, 'Japan'),
    (234, 'Nigeria'),
    (92, 'Pakistan'),
    (7, 'Russia'),
    (1, 'United States'),
    ]
-. . -..- - / . -. - .-. -.--
country_dial = {country: code for code, country in dial_codes}
-. . -..- - / . -. - .-. -.--
country_dial
-. . -..- - / . -. - .-. -.--
{code: country.upper()
    for country, code in sorted(country_dial.items())
    if code < 70}
-. . -..- - / . -. - .-. -.--
def dump(**kwargs):
    return kwargs

-. . -..- - / . -. - .-. -.--
dump(**{'x': 1}, y=2, **{'z': 3})
-. . -..- - / . -. - .-. -.--
{'a': 0, **{'x': 1}, 'y': 2, **{'z': 3, 'x': 4}}
-. . -..- - / . -. - .-. -.--
d1 = {'a': 1, 'b': 3}
-. . -..- - / . -. - .-. -.--
d2 = {'a': 2, 'b': 4, 'c': 6}
-. . -..- - / . -. - .-. -.--
d1 | d2
-. . -..- - / . -. - .-. -.--
d1 |= d2
-. . -..- - / . -. - .-. -.--
d1
-. . -..- - / . -. - .-. -.--
b1 = dict(api=1, author='Douglas Hofstadter',
          type='book', title='Godel, Escher, Bach')
-. . -..- - / . -. - .-. -.--
/home/farhan/.config/JetBrains/PyCharm2022.2/scratches/scratch_1.py
-. . -..- - / . -. - .-. -.--
def get_creators(record: dict) -> list:
    match record:
        case {'type': 'book', 'api': 2, 'authors': [*names]}:
            return names
        case {'type': 'book', 'api': 1, 'author': name}:
            return [name]
        case {'type': 'book'}:
            raise ValueError(f"Invalid 'book' record: {record!r}")
        case {'type': 'movie', 'director': name}:
            return [name]
        case _:
            raise ValueError(f'Invalid record: {record!r}')
        
-. . -..- - / . -. - .-. -.--
get_creators(b1)
-. . -..- - / . -. - .-. -.--
from collections import OrderedDict
-. . -..- - / . -. - .-. -.--
b2 = OrderedDict(api=2, type='book',)
-. . -..- - / . -. - .-. -.--
b2 = OrderedDict(api=2, type='book',
                 title='Python in a Nutshell',
                 authors='Martelli Ravenscroft HOlden'.split())
-. . -..- - / . -. - .-. -.--
get_creators(b2)
-. . -..- - / . -. - .-. -.--
get_creators({'type': 'book', 'pages': 770})
-. . -..- - / . -. - .-. -.--
get_creators('Spam, spam, spam')
-. . -..- - / . -. - .-. -.--
food = dict(category='ice cream', flavor='vanilla', cost=199)
-. . -..- - / . -. - .-. -.--
match food:
    case {'category': 'ice cream', **details}:
        print(f'Ice cream details: {details}')
        
-. . -..- - / . -. - .-. -.--
my_dict = {}
-. . -..- - / . -. - .-. -.--
isinstance(my_dict, abc.Mapping)
-. . -..- - / . -. - .-. -.--
isinstance(my_dict, abc.MutableMapping)
-. . -..- - / . -. - .-. -.--
tt = (1, 2, (30, 40))
-. . -..- - / . -. - .-. -.--
hash(tt)
-. . -..- - / . -. - .-. -.--
tl = (1, 2, [30, 40])
-. . -..- - / . -. - .-. -.--
hash(tl)
-. . -..- - / . -. - .-. -.--
tf = (1, 2, frozenset([30, 40]))
-. . -..- - / . -. - .-. -.--
hash(tf)
-. . -..- - / . -. - .-. -.--
2+2
-. . -..- - / . -. - .-. -.--
50 - 5*6
-. . -..- - / . -. - .-. -.--
(50 - 5J*6) / 4
-. . -..- - / . -. - .-. -.--
(50 - 5*6) / 4
-. . -..- - / . -. - .-. -.--
8/5
-. . -..- - / . -. - .-. -.--
17 / 3
-. . -..- - / . -. - .-. -.--
17 // 3
-. . -..- - / . -. - .-. -.--
17 % 3
-. . -..- - / . -. - .-. -.--
5 * 3 + 2
-. . -..- - / . -. - .-. -.--
5 ** 2
-. . -..- - / . -. - .-. -.--
2 ** 7
-. . -..- - / . -. - .-. -.--
width = 20
-. . -..- - / . -. - .-. -.--
height = 5 * 9
-. . -..- - / . -. - .-. -.--
width * height
-. . -..- - / . -. - .-. -.--
n
-. . -..- - / . -. - .-. -.--
4 * 3.75 - 1
-. . -..- - / . -. - .-. -.--
tax = 12.5 / 100
-. . -..- - / . -. - .-. -.--
price = 100.50
-. . -..- - / . -. - .-. -.--
price * tax
-. . -..- - / . -. - .-. -.--
price + _
-. . -..- - / . -. - .-. -.--
round(_, 2)